---------Depth-First Search---------------


graph = {
  '5' : ['3','7'],
  '3' : ['2', '4'],
  '7' : ['8'],
  '2' : [],
  '4' : ['8'],
  '8' : []
}
visited = set() 
def dfs(visited, graph, node):  
    if node not in visited:
        print (node, end=" ")
        visited.add(node)
        for neighbour in graph[node]:
            dfs(visited, graph, neighbour)
print("Following is the Depth-First Search")
dfs(visited, graph, '5')



----------Breadth-First Search--------------------------



graph = {
  '5' : ['3','7'],
  '3' : ['2', '4'],
  '7' : ['8'],
  '2' : [],
  '4' : ['8'],
  '8' : []
}
visited = [] 
queue = []     
def bfs(visited, graph, node): 
  visited.append(node)
  queue.append(node)
  while queue:          
    m = queue.pop(0) 
    print (m, end = " ") 
    for neighbour in graph[m]:
      if neighbour not in visited:
        visited.append(neighbour)
        queue.append(neighbour)

print("Following is the Breadth-First Search")
bfs(visited, graph, '5')    



---------Best-First Search-----------------




from queue import PriorityQueue
v = 14
graph = [[] for i in range(v)]

def best_first_search(actual_Src, target, n):
	visited = [False] * n
	pq = PriorityQueue()
	pq.put((0, actual_Src))
	visited[actual_Src] = True
	while pq.empty() == False:
		u = pq.get()[1]

		print(u, end=" ")
		if u == target:
			break
		for v, c in graph[u]:
			if visited[v] == False:
				visited[v] = True
				pq.put((c, v))
	print()

def addedge(x, y, cost):
	graph[x].append((y, cost))
	graph[y].append((x, cost))

addedge(0, 1, 3)
addedge(0, 2, 6)
addedge(0, 3, 5)
addedge(1, 4, 9)
addedge(1, 5, 8)
addedge(2, 6, 12)
addedge(2, 7, 14)
addedge(3, 8, 7)
addedge(8, 9, 5)
addedge(8, 10, 6)
addedge(9, 11, 1)
addedge(9, 12, 10)
addedge(9, 13, 2)
source = 0
target = 9
best_first_search(source, target, v)




---------TSP------------------------------------



from sys import maxsize 
from itertools import permutations
V = 4


def travellingSalesmanProblem(graph, s): 

	
	vertex = [] 
	for i in range(V): 
		if i != s: 
			vertex.append(i) 

	
	min_path = maxsize 
	next_permutation=permutations(vertex)
	for i in next_permutation:

		
		current_pathweight = 0

		 
		k = s 
		for j in i: 
			current_pathweight += graph[k][j] 
			k = j 
		current_pathweight += graph[k][s] 

		
		min_path = min(min_path, current_pathweight) 
		
	return min_path 



if __name__ == "__main__": 

	
	graph = [[0, 10, 15, 20], [10, 0, 35, 25], 
			[15, 35, 0, 30], [20, 25, 30, 0]] 
	s = 0
	print(travellingSalesmanProblem(graph, s))




-----------------Hill - Climbing---------------------



import random
def hill_climbing(func, x_min, x_max, max_iterations):
    current_x = random.uniform(x_min, x_max)  
    
    for i in range(max_iterations):
        next_x = current_x + random.uniform(-0.1, 0.1) 
        
        if x_min <= next_x <= x_max:
            if func(next_x) > func(current_x):  
                
                current_x = next_x

        print(f"Iteration {i+1}: x = {current_x}, f(x) = {func(current_x)}")
    return current_x


def sample_function(x):
    return -x**2 + 2*x + 5  


x_min = -10
x_max = 10
max_iterations = 50


result = hill_climbing(sample_function, x_min, x_max, max_iterations)
print(f"\nThe maximum value found: x = {result}, f(x) = {sample_function(result)}")



-------------------A*------------------------------------





def aStarAlgo(start_node, stop_node):
        open_set = set(start_node) 
        closed_set = set()
        g = {} 
        parents = {}
        g[start_node] = 0
        parents[start_node] = start_node
        while len(open_set) > 0:
            n = None
            for v in open_set:
                if n == None or g[v] + heuristic(v) < g[n] + heuristic(n):
                    n = v
            if n == stop_node or Graph_nodes[n] == None:
                pass
            else:
                for (m, weight) in get_neighbors(n):
                    if m not in open_set and m not in closed_set:
                        open_set.add(m)
                        parents[m] = n
                        g[m] = g[n] + weight
                    else:
                        if g[m] > g[n] + weight:
                           
                            g[m] = g[n] + weight
                           
                            parents[m] = n
                            if m in closed_set:
                                closed_set.remove(m)
                                open_set.add(m)
            if n == None:
                print('Path does not exist!')
                return None
            if n == stop_node:
                path = []
                while parents[n] != n:
                    path.append(n)
                    n = parents[n]
                path.append(start_node)
                path.reverse()
                print('Path found: {}'.format(path))
                return path
            open_set.remove(n)
            closed_set.add(n)
        print('Path does not exist!')
        return None

def get_neighbors(v):
    if v in Graph_nodes:
        return Graph_nodes[v]
    else:
        return None
def heuristic(n):
        H_dist = {
            'A': 11,
            'B': 6,
            'C': 99,
            'D': 1,
            'E': 7,
            'G': 0,
        }
        return H_dist[n]
Graph_nodes = {
    'A': [('B', 2), ('E', 3)],
    'B': [('C', 1),('G', 9)],
    'C': None,
    'E': [('D', 6)],
    'D': [('G', 1)],
}
aStarAlgo('A', 'G')




--------------AO*------------------------------------------




def Cost(H, condition, weight = 1):
    cost = {}
    if 'AND' in condition:
        AND_nodes = condition['AND']
        Path_A = ' AND '.join(AND_nodes)
        PathA = sum(H[node]+weight for node in AND_nodes)
        cost[Path_A] = PathA
 
    if 'OR' in condition:
        OR_nodes = condition['OR']
        Path_B =' OR '.join(OR_nodes)
        PathB = min(H[node]+weight for node in OR_nodes)
        cost[Path_B] = PathB
    return cost
 

def update_cost(H, Conditions, weight=1):
    Main_nodes = list(Conditions.keys())
    Main_nodes.reverse()
    least_cost= {}
    for key in Main_nodes:
        condition = Conditions[key]
        print(key,':', Conditions[key],'>>>', Cost(H, condition, weight))
        c = Cost(H, condition, weight) 
        H[key] = min(c.values())
        least_cost[key] = Cost(H, condition, weight)            
    return least_cost
 

def shortest_path(Start,Updated_cost, H):
    Path = Start
    if Start in Updated_cost.keys():
        Min_cost = min(Updated_cost[Start].values())
        key = list(Updated_cost[Start].keys())
        values = list(Updated_cost[Start].values())
        Index = values.index(Min_cost)
         
       
        Next = key[Index].split()
        
        if len(Next) == 1:
 
            Start =Next[0]
            Path += '<--' +shortest_path(Start, Updated_cost, H)
        
        else:
            Path +='<--('+key[Index]+') '
 
            Start = Next[0]
            Path += '[' +shortest_path(Start, Updated_cost, H) + ' + '
 
            Start = Next[-1]
            Path +=  shortest_path(Start, Updated_cost, H) + ']'
 
    return Path
         
        
 
H = {'A': -1, 'B': 5, 'C': 2, 'D': 4, 'E': 7, 'F': 9, 'G': 3, 'H': 0, 'I':0, 'J':0}
 
Conditions = {
 'A': {'OR': ['B'], 'AND': ['C', 'D']},
 'B': {'OR': ['E', 'F']},
 'C': {'OR': ['G'], 'AND': ['H', 'I']},
 'D': {'OR': ['J']}
}

weight = 1

print('Updated Cost :')
Updated_cost = update_cost(H, Conditions, weight=1)
print('*'*75)
print('Shortest Path :\n',shortest_path('A', Updated_cost,H))



